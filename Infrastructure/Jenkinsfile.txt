pipeline {
    agent {
        label "linux"
    }
    parameters {
        booleanParam(name: 'TagLatest', defaultValue: false, description: 'Tag this image as latest')
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '30', artifactNumToKeepStr: '30'))
        timestamps()
        disableConcurrentBuilds()
    }
    environment {
        projectName  = "xsa_cli_deploy"
        deployTo = "sit"
        version = "1.0.0.${env.BUILD_NUMBER}"
        suffix = "${env.GIT_COMMIT}-${env.GIT_BRANCH.replace('/', '-')}"
        packageVersion = "${version}-${suffix}"
        jobName = "XSA_CLI_DEPLOY"
        artifactoryServerId = "artifactory"   
    }
    stages {
        stage ("Build docker") {
            steps {
                sh "docker build -f XSA_DEPLOY_DOCKER/Dockerfile -t ${artifactoryDocker}/${projectName}:${packageVersion} --build-arg XSZIP=XSA_DEPLOY_DOCKER/XS_CLIENT00P_121-70001320.ZIP --build-arg HDBCLIZIP=XSA_DEPLOY_DOCKER/SAP_HANA_CLIENT.zip ."
                sh "docker tag ${artifactoryDocker}/${projectName}:${packageVersion} ${artifactoryDocker}/${projectName}:latest"
                rtDockerPush(
                    serverId: "${artifactoryServerId}",
                    image: "${artifactoryDocker}/${projectName}:${packageVersion}",
                    targetRepo: 'docker-local',
                    buildNumber: "${packageVersion}",
                    buildName: "${projectName}"
                )
                rtDockerPush(
                    serverId: "${artifactoryServerId}",
                    image: "${artifactoryDocker}/${projectName}:latest",
                    targetRepo: 'docker-local',
                    buildNumber: "${packageVersion}",
                    buildName: "${projectName}"
                )
                rtPublishBuildInfo (buildNumber: "${packageVersion}", buildName: "${projectName}", serverId: "${artifactoryServerId}")
            }
        }
        stage ("Octopus sit") {
            agent {
                docker {
                    image "octopusdeploy/octo"
                    args '--entrypoint=\'\''
                }
		    }
            options { skipDefaultCheckout true }
            environment {
                deployTo = "sit"
                releaseversion = "${version}"
                OCTOPUS_CLI_SERVER = "https://octopus.azure.dsb.dk"
                OCTOPUS_CLI_API_KEY = credentials("Octopus-Api")
                hostargs = "--project ${jobName} --version=${releaseversion} --space=Spaces-3"
            }
            steps {
                addBadge(text: "octopus", icon: "/userContent/octopus_16x16.png", id: "octopus", link: "${octopusURL}/app#/Spaces-3/projects/${jobName}/deployments/releases/${releaseversion}")
                sh """
                    octo create-release  $hostargs --defaultpackageversion=${packageVersion}
                    octo deploy-release $hostargs --deployto=${deployTo} --waitfordeployment --deploymentTimeout=00:20:00
                """
            }
        }
    }
}